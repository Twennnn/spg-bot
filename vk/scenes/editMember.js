import commonTags from 'common-tags';
import { ButtonColor, Keyboard } from 'vk-io';
import { StepScene } from '@vk-io/scenes';

import { sceneManager } from '../client';
import { chunkArray, getCurrentNickname, getPermissionRoleName, isCurrentNickname, isValidHex } from '../../utils';
import { getValueByNickname, Member } from '../../db';
import { hyperLink } from '../utils';
import { getProbationRoleName } from '../../utils';

const { stripIndents } = commonTags;

sceneManager.addScenes([
    new StepScene('edit_member', {
        steps: [
            (context) => {
                if (context.scene.step.firstTime || !context.text) {
                    return context.send({
                        message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º —á–µ–ª–æ–≤–µ–∫–∞, —á—å–∏ –¥–∞–Ω–Ω—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                        keyboard: Keyboard.builder()
                            .textButton({
                                label: '–û—Ç–º–µ–Ω–∞',
                                color: ButtonColor.NEGATIVE,
                                payload: {
                                    command: 'help'
                                }
                            })
                            .row()
                            .inline()
                    });
                }

                context.scene.state.nickname = context.text;

                return context.scene.step.next();
            },
            async (context) => {
                const { nickname } = context.scene.state;

                if (!await Member.findOne({ nickname: await getCurrentNickname(nickname) })) {
                    context.send('–û—à–∏–±–∫–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

                    return context.scene.step.previous();
                }

                return context.scene.step.next();
            },
            async (context) => {
                if (context.scene.step.firstTime || typeof context?.messagePayload?.chooseOption === 'undefined') {
                    let isFirstPage = true;
                    const optionsList = [
                        {name:'–ù–∏–∫–Ω–µ–π–º',
                            chooseOption: 'nickname'},
                        {name: '–í–ö id',
                            chooseOption: 'vkId'},
                        {name: '–î–∏—Å–∫–æ—Ä–¥ id',
                            chooseOption: 'discordId'},
                        {name: '–¶–≤–µ—Ç',
                            chooseOption: 'color'},
                        {name: '–û–ø–∏—Å–∞–Ω–∏–µ',
                            chooseOption: 'description'},
                        {name: '–ñ–∏—Ç–µ–ª—å/–∏—Å–ø.—Å—Ä–æ–∫',
                            chooseOption: 'probation'},
                        {name: '–†–æ–ª—å',
                            chooseOption: 'permission'}
                    ]
                    for (const chunkedOptions of chunkArray(optionsList, 6)) {
                        const keyboard = Keyboard.builder()
                            .inline();

                        chunkedOptions.forEach(({ name, chooseOption }) => {
                            keyboard.textButton({
                                label: name,
                                payload: {
                                    chooseOption
                                }
                            })
                                .row();
                        });

                        await context.send({
                            message: isFirstPage ?
                                '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:'
                                :
                                '&#4448;',
                            keyboard: keyboard
                                .row()
                                .inline()
                        });

                        isFirstPage = false;
                    }

                    return;
                }

                context.scene.state.chooseOption = context.messagePayload.chooseOption;

                return context.scene.step.next();
            },
            async (context) => {
                const { chooseOption, nickname } = context.scene.state;

                if (context.scene.step.firstTime && chooseOption === 'nickname') {
                    const nowNickname = await getValueByNickname(nickname, 'nickname');

                    return context.send(stripIndents`
                        –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∏–∫–Ω–µ–π–º: ${hyperLink(nowNickname)}
                           
                        –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º:
                        `);
                }
                if (!(chooseOption === 'nickname')) {
                    return context.scene.step.next();
                }

                context.scene.state.newNickname = await getCurrentNickname(context.text);

                return context.scene.step.next();
            },
            async(context) => {
                const { newNickname } = context.scene.state;

                if (newNickname){
                    if (await isCurrentNickname(newNickname)) {
                        context.send('–ù–∏–∫–Ω–µ–π–º –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
                    } else {
                        context.send('–î–∞–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')

                        return context.scene.step.previous();
                    }
                }

                return context.scene.step.next();
            },
            async (context) => {
                const { chooseOption, nickname } = context.scene.state;

                if (context.scene.step.firstTime && chooseOption === 'vkId') {
                    const nowVkId = await getValueByNickname(nickname, 'vkId');

                    return context.send(stripIndents`
                        –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω id –≤ –í–ö: ${hyperLink(nowVkId)}
                           
                        –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π id:
                        `)
                }
                if (chooseOption !== 'vkId') {
                    return context.scene.step.next();
                }

                context.scene.state.newVkId = context.text;

                return context.scene.step.next();
            },
            (context) => {
                const { newVkId } = context.scene.state;

                if (newVkId) {
                    if (newVkId.toString().length === 9) {
                        context.send('ID –≤ –í–ö –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–≤–Ω–æ–≤–ª–µ–Ω–æ');
                    } else {
                        context.send('–û—à–∏–±–∫–∞! ID —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')

                        return context.scene.step.previous();
                    }
                }

                return context.scene.step.next();
            },
            async (context) => {
                const { chooseOption, nickname } = context.scene.state;

                if (context.scene.step.firstTime && chooseOption === 'discordId') {
                    const nowDiscordId = await getValueByNickname(nickname, 'discordId');

                    return context.send(stripIndents`
                        –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID –≤ –î–∏—Å–∫–æ—Ä–¥: ${hyperLink(nowDiscordId)}
                           
                        –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID –≤ –î–∏—Å–∫–æ—Ä–¥ :
                        `);
                }
                if (chooseOption !== 'discordId') {
                    return context.scene.step.next();
                }

                context.scene.state.newDiscordId = context.text;

                return context.scene.step.next();
            },
            (context) => {
                const { newDiscordId } = context.scene.state;

                if (newDiscordId) {
                    if (newDiscordId.length === 18) {
                        context.send('ID –≤ –î–∏—Å–∫–æ—Ä–¥–µ –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–≤–Ω–æ–≤–ª–µ–Ω–æ');
                    } else {
                        context.send('–û—à–∏–±–∫–∞! ID —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');

                        return context.scene.step.previous();
                    }
                }

                return context.scene.step.next();
            },
            async (context) => {
                const { chooseOption, nickname } = context.scene.state;

                if (context.scene.step.firstTime && chooseOption === 'color') {
                    const nowColor = await getValueByNickname(nickname, 'color');

                    return context.send({
                        message:stripIndents`
                        üìù –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ü–≤–µ—Ç: ${hyperLink(nowColor)}
                        
                        –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–π —Ü–≤–µ—Ç.
                        
                        –í—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π —Ü–≤–µ—Ç –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ: https://htmlcolorcodes.com/
                        `,
                        dont_parse_links: 1
                    })
                }
                if (chooseOption !== 'color') {
                    return context.scene.step.next();
                }

                context.scene.state.newColor = context.text;

                return context.scene.step.next();
            },
            (context) => {
                const { newColor } = context.scene.state;

                if (newColor) {
                    if (isValidHex(newColor)) {
                        context.send('–¶–≤–µ—Ç –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–≤–Ω–æ–≤–ª–µ–Ω');
                    } else {
                        context.send('–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')

                        return context.scene.step.previous();
                    }
                }

                return context.scene.step.next();
            },
            async (context) => {
                const { chooseOption, nickname } = context.scene.state;

                if (context.scene.step.firstTime && chooseOption === 'description') {
                    return context.send(stripIndents`
                        –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–ø–∏—Å–∞–Ω–∏–µ:
                        
                        "${await getValueByNickname(nickname, 'description')}"
                        
                        –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:
                        `);
                }
                if (chooseOption !== 'description') {
                    return context.scene.step.next();
                }

                context.scene.state.newDescription = context.text;

                return context.scene.step.next();
            },
            (context) => {
                const { newDescription } = context.scene.state;

                if (newDescription) {
                        context.send('–û–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–≤–Ω–æ–≤–ª–µ–Ω–æ');
                }

                return context.scene.step.next();
            },
            async (context) => {
                const { chooseOption, nickname } = context.scene.state;

                if (context.scene.step.firstTime && chooseOption === 'probation') {
                    const nowProbation = getProbationRoleName(await getValueByNickname(nickname, 'probation'));

                    return context.send({
                        message:stripIndents`
                        –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å: ${hyperLink(nowProbation)}
                           
                        –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é —Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:
                        `,
                        keyboard: Keyboard.builder()
                            .textButton({
                                label: '–ñ–∏—Ç–µ–ª—å',
                                payload: {
                                    newProbation: false
                                }
                            })
                            .textButton({
                                label: '–ò—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫',
                                payload: {
                                    newProbation: true
                                }
                            })
                            .row()
                            .inline()
                    });
                }
                if (chooseOption !== 'probation') {
                    return context.scene.step.next();
                }

                context.scene.state.newProbation = context.messagePayload.newProbation;

                return context.scene.step.next();
            },
            (context) => {
                const { newProbation } = context.scene.state;

                if (typeof newProbation === 'boolean') {
                    context.send('–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!')
                }

                return context.scene.step.next();
            },
            async (context) => {
                const { chooseOption, nickname } = context.scene.state;

                if (context.scene.step.firstTime && chooseOption === 'permission') {
                    const nowPermission = getPermissionRoleName(await getValueByNickname(nickname, 'permission'));

                    return context.send({
                        message:stripIndents`
                        –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å: ${hyperLink(nowPermission)}
                           
                        –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é —Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:
                        `,
                        keyboard: Keyboard.builder()
                            .textButton({
                                label: 'üé© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                payload: {
                                    newPermission: 1
                                }
                            })
                            .row()
                            .textButton({
                                label: 'üë©‚Äçüåæ –ñ–∏—Ç–µ–ª—å',
                                payload: {
                                    newPermission: 3
                                }
                            })
                            .row()
                            .textButton({
                                label: '‚öî –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
                                payload: {
                                    newPermission: 5
                                }
                            })
                            .row()
                            .textButton({
                                label: '‚öô –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                                payload: {
                                    newPermission: 10
                                }
                            })
                            .row()
                            .inline()
                    });
                }
                if (chooseOption !== 'permission') {
                    return context.scene.step.next();
                }

                context.scene.state.newPermission = context.messagePayload.newPermission;

                return context.scene.step.next();
            },
            (context) => {
                const { newPermission } = context.scene.state;

                if (newPermission) {
                    context.send('–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!')
                }

                return context.scene.step.next();
            },
            async (context) => {
                if (context.scene.step.firstTime || typeof context?.messagePayload?.proceed === 'undefined') {
                    return context.send({
                        message: '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã?',
                        keyboard: Keyboard.builder()
                            .textButton({
                                label: '–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                                payload: {
                                    proceed: true
                                }
                            })
                            .textButton({
                                label: '–ù–µ—Ç, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                                payload: {
                                    proceed: false
                                }
                            })
                            .row()
                            .inline()
                    })
                }

                context.scene.state.proceed = context.messagePayload.proceed;

                return context.scene.step.next();
            },
            async (context) => {
                const { proceed } = context.scene.state;

                if (proceed) {
                    return context.scene.step.go(2)
                } else {
                    return context.scene.step.next()
                }
            }
        ],
        leaveHandler: (context) => {
            const {
                resolve,
                reject,
                nickname,
                newNickname,
                newVkId,
                newDiscordId,
                newColor,
                newDescription,
                newProbation,
                newPermission
            } = context.scene.state;

            if (!context.scene.canceled) {
                resolve({
                    nickname,
                    newNickname,
                    newVkId,
                    newDiscordId,
                    newColor,
                    newDescription,
                    newProbation,
                    newPermission
                });
            } else {
                reject(
                    new Error('Canceled by user.')
                );
            }
        }
    })
])